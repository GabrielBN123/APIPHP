version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["/entrypoint.sh"]
    container_name: APISELETIVO
    restart: unless-stopped
    working_dir: /app
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8181:8181"
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: us-east-1
      AWS_BUCKET: meu-bucket
      AWS_ENDPOINT: http://minio:9000

  db:
    image: postgres:latest
    container_name: laravel_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 20s

  minio:
    image: minio/minio
    container_name: laravel_minio
    restart: unless-stopped
    command: ["server", "/data", "--console-address", ":9001"]
    ports:
      - "9000:9000"  # API S3
      - "9001:9001"  # Painel Web
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      retries: 5
      start_period: 20s

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        sleep 5;
        mc alias set local http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
        mc mb local/${AWS_BUCKET} || true;
      "
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET: ${AWS_BUCKET}

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "9003:80"
  #   depends_on:
  #     - minio
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  # caddy:
  #   image: caddy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./Caddyfile:/etc/caddy/Caddyfile
volumes:
  postgres_data:
  minio_data:
